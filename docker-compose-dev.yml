version: "3.3"
networks:
  internal_network:
# network created by docker, you can bind to yourr by 'external: true'
    attachable: true
    ipam:
      config:
        - subnet: 172.20.0.0/24
services:
  db:
    image: "mariadb:10.8"
    command: --transaction-isolation=READ-COMMITTED --binlog-format=ROW --log-bin=mysqld-bin
    networks:
      internal_network:
        ipv4_address: 172.20.0.5
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=pass1234!
      - MYSQL_PASSWORD=pass1234!
      - MYSQL_USER=user
      - MYSQL_DATABASE=db
    volumes:
      - ./50-server.cnf:/etc/mysql/mariadb.conf.d/50-server.cnf:ro
  grpc_proxy:
    image: "envoyproxy/envoy:v1.21-latest"
    networks:
      internal_network:
        ipv4_address: 172.20.0.7
    ports:
      - "5002:5002"
    volumes:
      - ./envoy.yaml:/etc/envoy/envoy.yaml
    depends_on:
      - db
  redis:
    image: "redis:7.0.1-alpine"
    networks:
      internal_network:
        ipv4_address: 172.20.0.9
    ports:
      - "6379:6379"
    volumes:
      - ./redis.conf:/etc/redis.conf
    command: redis-server /etc/redis.conf
    depends_on:
      - grpc_proxy
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 2181:2181
    networks:
      internal_network:
        ipv4_address: 172.20.0.13
  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
      - 9092:9092
    networks:
      internal_network:
        ipv4_address: 172.20.0.12
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,LISTENER_DOCKER_EXTERNAL://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
  debezium:
    image: debezium/connect:latest
    platform: 'linux/amd64'
    depends_on:
      - kafka
    ports:
      - 8083:8083
    networks:
      internal_network:
        ipv4_address: 172.20.0.11
    environment:
        CONFIG_STORAGE_TOPIC: my_connect_configs
        OFFSET_STORAGE_TOPIC: my_connect_offsets
        STATUS_STORAGE_TOPIC: my_connect_statuses
        BOOTSTRAP_SERVERS: kafka:9092
    # inject delay for 5 sec because schema-registry initializing is not fast
    entrypoint: ["/bin/bash"]
    command: ["-c", "sleep 5; exec /docker-entrypoint.sh 'start'"]
  schema-registry:
    image: confluentinc/cp-schema-registry
    ports:
      - 8085:8085
    hostname: schema-registry
    depends_on:
    - kafka
    - zookeeper
    - debezium
    networks:
      internal_network:
        ipv4_address: 172.20.0.10
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka:9092
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: zookeeper:2181
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8085, http://172.20.0.10:8081
  backend-dev:
    build: 
      context: ./node-server/
      dockerfile: Dockerfile.dev
    networks:
      internal_network:
        ipv4_address: 172.20.0.6
    ports:
      - "8080:8080"
      - "5001:5001"
    volumes:
      - ./node-server/src:/project/node-server/src:rw
      - ./node-server/public:/project/node-server/public:ro
      - ./node-server/package.json:/project/node-server/package.json:rw
      - ./node-server/yarn.lock:/project/node-server/yarn.lock:rw
      - ./node-server/tsconfig.json:/project/node-server/tsconfig.json:ro
      - ./node-server/.env:/project/node-server/.env:ro
      - ./node-server/.env:/project/node-server/build/.env:ro
      - ./node-server/node_modules:/project/node-server/node_modules:rw
    depends_on:
      - grpc_proxy
      - db
      - redis
      - zookeeper
      - kafka
      - debezium
      - schema-registry
  frontend-dev:
    build:
      context: ./react-app/
      dockerfile: Dockerfile.dev
    networks:
      internal_network:
        ipv4_address: 172.20.0.8
    volumes:
      - ./react-app/src:/project/react-app/src:ro
      - ./react-app/public:/project/react-app/public:ro
      - ./react-app/package.json:/project/react-app/package.json
    depends_on:
      - grpc_proxy
      - backend-dev
    ports:
      - "3000:3000"